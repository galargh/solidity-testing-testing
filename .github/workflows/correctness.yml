
on:
  workflow_dispatch:
    inputs:
      repositories:
        description: 'Repositories (default: "", example: ["transmissions11/solmate"])'
        required: false
        type: string
        default: ''
      hardhat-version:
        description: 'Hardhat version (default: "3.0.0-next.18")'
        required: true
        type: string
        default: '3.0.0-next.18'
      forge-version:
        description: 'Forge version (default: "v0.3.0")'
        required: true
        type: string
        default: 'v0.3.0'
      node-version:
        description: 'Node.js version (default: "22.10.0")'
        required: true
        type: string
        default: '22.10.0'

defaults:
  run:
    shell: bash

env:
  HARDHAT_VERSION: ${{ github.event.inputs.hardhat-version }}
  FORGE_VERSION: ${{ github.event.inputs.forge-version }}
  NODE_VERSION: ${{ github.event.inputs.node-version }}

jobs:
  discover:
    if: github.event.inputs.repositories == ''
    runs-on: ubuntu-latest
    outputs:
      repositories: ${{ steps.repositories.outputs.repositories }}
    steps:
      - name: Checkout the testing repository
        uses: actions/checkout@v4
      - name: Find repositories that need to be tested
        id: repositories
        run: |
          echo "repositories<<EOF" >> $GITHUB_OUTPUT
          jq -r 'keys' repositories.json | tee -a $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  build:
    if: (!startsWith(github.event.inputs.hardhat-version, '3.0.0'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Hardhat repository
        uses: actions/checkout@v4
        with:
          repository: NomicFoundation/hardhat
          ref: ${{ github.event.inputs.hardhat-version }}
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version: 22
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline
        working-directory: v-next/hardhat
      - name: Build the Hardhat package
        run: pnpm build
        working-directory: v-next/hardhat
      - name: Pack the Hardhat package
        run: pnpm pack
        working-directory: v-next/hardhat
      - name: Upload the Hardhat package
        uses: actions/upload-artifact@v4
        with:
          name: hardhat
          path: v-next/hardhat/*.tgz
  run:
    if: success() || (!cancelled() && github.event.inputs.repositories != '')
    needs:
      - discover
      - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repository: ${{ github.event.inputs.repositories != '' && fromJson(github.event.inputs.repositories) || fromJson(needs.discover.outputs.repositories) }}
        run:
          - command: forge build
            regex: 'Compiling \d+ files with Solc \d+\.\d+'
          - command: forge test
            regex: 'Ran \d+ test suites in \d+\.\d+m?s \(\d+\.\d+m?s CPU time\): \d+ tests passed, \d+ failed, \d+ skipped \(\d+ total tests\)'
          - command: hardhat compile
            regex: 'Compiled \d+ Solidity files with solc \d+\.\d+'
          - command: hardhat test solidity
            regex: 'Run (?:Failed|Passed): \d+ tests, \d+ passed, \d+ failed, \d+ skipped \(duration: \d+ ms\)'
    steps:
      - name: Checkout the testing repository
        uses: actions/checkout@v4
        with:
          path: ${{ github.repository }}
      - name: Find the configuration for the repository
        id: config
        env:
          REPOSITORY: ${{ matrix.repository }}
        run: |
          echo "config<<EOF" >> $GITHUB_OUTPUT
          jq -r '.[env.REPOSITORY]' repositories.json | tee -a $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        working-directory: ${{ github.repository }}
      - name: Checkout the repository to be tested
        id: repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: ${{ matrix.repository }}
          path: ${{ matrix.repository }}
          ref: ${{ fromJSON(steps.config.outputs.config).ref }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup Foundry
        uses: foundry-rs/foundry-toolchain@de808b1eea699e761c404bda44ba8f21aba30b2c
        with:
          version: ${{ env.FORGE_VERSION }}
          cache: false
      - name: Install Hardhat
        if: startsWith(github.event.inputs.hardhat-version, '3.0.0')
        run: npm install -g @ignored/hardhat-vnext@${{ env.HARDHAT_VERSION }}
      - name: Download Hardhat
        if: (!startsWith(github.event.inputs.hardhat-version, '3.0.0'))
        uses: actions/download-artifact@v4
        with:
          name: hardhat
      - name: Install Hardhat
        if: (!startsWith(github.event.inputs.hardhat-version, '3.0.0'))
        run: npm install -g *.tgz
      - name: Install the package manager
        if: fromJSON(steps.config.outputs.config).packageManager != '' && fromJSON(steps.config.outputs.config).packageManager != 'npm'
        run: npm install -g ${{ fromJSON(steps.config.outputs.config).packageManager }}
      - name: Install the dependencies
        if: fromJSON(steps.config.outputs.config).packageManager != ''
        run: ${{ fromJSON(steps.config.outputs.config).packageManager }} install
        working-directory: ${{ matrix.repository }}
      - name: Initialize the repository
        if: fromJSON(steps.config.outputs.config).packageManager == ''
        run: npm init -y
        working-directory: ${{ matrix.repository }}
      - name: Set the package type
        run: npm pkg set type="module"
        working-directory: ${{ matrix.repository }}
      - name: Set the Hardhat configuration
        env:
          HARDHAT_CONFIG: ${{ toJSON(fromJSON(steps.config.outputs.config).hardhatConfig) }}
        run: |
          rm hardhat.config.ts 2>/dev/null || true
          echo "export default $HARDHAT_CONFIG;" > hardhat.config.js
          sed -i 's/blockGasLimit": "\([0-9]\+\)"/blockGasLimit": BigInt(\1)/' hardhat.config.js
          sed -i 's/blockTimestamp": "\([0-9]\+\)"/blockTimestamp": BigInt(\1)/' hardhat.config.js
          cat hardhat.config.js
        working-directory: ${{ matrix.repository }}
      - name: Run ${{ matrix.run.command }}
        id: run
        env:
          CONFIG_ENV: ${{ toJSON(fromJSON(steps.config.outputs.config).env || fromJSON('{}')) }}
        run: |
          for key in $(jq -r 'keys[]' <<< "$CONFIG_ENV"); do
            value=$(jq -r ".[\"$key\"]" <<< "$CONFIG_ENV")
            export "$key"="$value"
          done
          env
          touch '${{ matrix.run.command }}.out'
          /usr/bin/time -o '${{ matrix.run.command }}.time' -p ${{ matrix.run.command }} 2>&1 | tee -a '${{ matrix.run.command }}.out'
        working-directory: ${{ matrix.repository }}
        continue-on-error: true
      - name: Prepare the upload
        id: upload
        env:
          REPOSITORY: ${{ matrix.repository }}
        run: |
          echo "name=${REPOSITORY%/*} ${REPOSITORY#*/} $(git rev-parse HEAD) ${{ matrix.run.command }}" | tee -a $GITHUB_OUTPUT
          echo "title=${{ matrix.repository }}: ${{ matrix.run.command }}" | tee -a $GITHUB_OUTPUT
          echo "path=${{ matrix.repository }}/${{ matrix.run.command }}.result" | tee -a $GITHUB_OUTPUT
          echo "content<<EOF" | tee -a $GITHUB_OUTPUT
          (grep -P '${{ matrix.run.regex }}' '${{ matrix.run.command }}.out' || echo "Unexpected Error") | tee -a '${{ matrix.run.command }}.result' | tee -a $GITHUB_OUTPUT
          echo "EOF" | tee -a $GITHUB_OUTPUT
          echo "" | tee -a '${{ matrix.run.command }}.result'
          cat '${{ matrix.run.command }}.time' | tee -a '${{ matrix.run.command }}.result'
        working-directory: ${{ matrix.repository }}
      - name: Set the notice
        run: |
          echo "::notice title=${{ steps.upload.outputs.title }}::${{ steps.upload.outputs.content }}"
        working-directory: ${{ matrix.repository }}
      - name: Upload the result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.upload.outputs.name }}
          path: ${{ steps.upload.outputs.path }}
  summary:
    if: (!cancelled())
    needs: run
    runs-on: ubuntu-latest
    steps:
      - name: Download the results
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
      - name: Summarize the results
        id: summary
        run: |
          echo "Testing repository: ${{ github.repository }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "Git SHA: ${{ github.sha }}" | tee -a $GITHUB_STEP_SUMMARY
          echo "Node.js version: $NODE_VERSION" | tee -a $GITHUB_STEP_SUMMARY
          echo "Hardhat version: $HARDHAT_VERSION"  | tee -a $GITHUB_STEP_SUMMARY
          echo "Forge version: $FORGE_VERSION" | tee -a $GITHUB_STEP_SUMMARY
          echo "" | tee -a $GITHUB_STEP_SUMMARY
          for file in **/*.result; do
            echo "#### $file" | tee -a $GITHUB_STEP_SUMMARY
            echo "" | tee -a $GITHUB_STEP_SUMMARY
            cat "$file" | tee -a $GITHUB_STEP_SUMMARY
            echo "" | tee -a $GITHUB_STEP_SUMMARY
          done
